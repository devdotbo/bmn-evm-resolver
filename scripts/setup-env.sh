#!/bin/bash

# Bridge-Me-Not Resolver Environment Setup Script
# This script reads deployment files and creates a .env file with contract addresses

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"

echo "🔧 Setting up Bridge-Me-Not Resolver environment..."

# Check if deployment files exist
if [ ! -f "$PROJECT_ROOT/deployments/chainA.json" ] || [ ! -f "$PROJECT_ROOT/deployments/chainB.json" ]; then
    echo "❌ Error: Deployment files not found in $PROJECT_ROOT/deployments/"
    echo "Please ensure the contracts are deployed first."
    exit 1
fi

# Read deployment files
CHAIN_A_DEPLOYMENT=$(cat "$PROJECT_ROOT/deployments/chainA.json")
CHAIN_B_DEPLOYMENT=$(cat "$PROJECT_ROOT/deployments/chainB.json")

# Extract addresses using jq or python
if command -v jq &> /dev/null; then
    # Use jq if available
    CHAIN_A_FACTORY=$(echo "$CHAIN_A_DEPLOYMENT" | jq -r '.contracts.factory')
    CHAIN_A_PROTOCOL=$(echo "$CHAIN_A_DEPLOYMENT" | jq -r '.contracts.limitOrderProtocol')
    CHAIN_A_TOKEN_A=$(echo "$CHAIN_A_DEPLOYMENT" | jq -r '.contracts.tokenA')
    CHAIN_A_TOKEN_B=$(echo "$CHAIN_A_DEPLOYMENT" | jq -r '.contracts.tokenB')
    
    CHAIN_B_FACTORY=$(echo "$CHAIN_B_DEPLOYMENT" | jq -r '.contracts.factory')
    CHAIN_B_PROTOCOL=$(echo "$CHAIN_B_DEPLOYMENT" | jq -r '.contracts.limitOrderProtocol')
    CHAIN_B_TOKEN_A=$(echo "$CHAIN_B_DEPLOYMENT" | jq -r '.contracts.tokenA')
    CHAIN_B_TOKEN_B=$(echo "$CHAIN_B_DEPLOYMENT" | jq -r '.contracts.tokenB')
else
    # Fall back to python
    CHAIN_A_FACTORY=$(python3 -c "import json; print(json.loads('$CHAIN_A_DEPLOYMENT')['contracts']['factory'])")
    CHAIN_A_PROTOCOL=$(python3 -c "import json; print(json.loads('$CHAIN_A_DEPLOYMENT')['contracts']['limitOrderProtocol'])")
    CHAIN_A_TOKEN_A=$(python3 -c "import json; print(json.loads('$CHAIN_A_DEPLOYMENT')['contracts']['tokenA'])")
    CHAIN_A_TOKEN_B=$(python3 -c "import json; print(json.loads('$CHAIN_A_DEPLOYMENT')['contracts']['tokenB'])")
    
    CHAIN_B_FACTORY=$(python3 -c "import json; print(json.loads('$CHAIN_B_DEPLOYMENT')['contracts']['factory'])")
    CHAIN_B_PROTOCOL=$(python3 -c "import json; print(json.loads('$CHAIN_B_DEPLOYMENT')['contracts']['limitOrderProtocol'])")
    CHAIN_B_TOKEN_A=$(python3 -c "import json; print(json.loads('$CHAIN_B_DEPLOYMENT')['contracts']['tokenA'])")
    CHAIN_B_TOKEN_B=$(python3 -c "import json; print(json.loads('$CHAIN_B_DEPLOYMENT')['contracts']['tokenB'])")
fi

# Create .env file
cat > "$PROJECT_ROOT/.env" << EOF
# Bridge-Me-Not Resolver Environment Configuration
# Generated by setup-env.sh on $(date)

# Private Keys (Anvil test accounts - NEVER use in production!)
RESOLVER_PRIVATE_KEY=0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a
ALICE_PRIVATE_KEY=0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d

# Chain A Contract Addresses (Port 8545, Chain ID 1337)
CHAIN_A_ESCROW_FACTORY=$CHAIN_A_FACTORY
CHAIN_A_LIMIT_ORDER_PROTOCOL=$CHAIN_A_PROTOCOL
CHAIN_A_TOKEN_TKA=$CHAIN_A_TOKEN_A
CHAIN_A_TOKEN_TKB=$CHAIN_A_TOKEN_B

# Chain B Contract Addresses (Port 8546, Chain ID 1338)
CHAIN_B_ESCROW_FACTORY=$CHAIN_B_FACTORY
CHAIN_B_LIMIT_ORDER_PROTOCOL=$CHAIN_B_PROTOCOL
CHAIN_B_TOKEN_TKA=$CHAIN_B_TOKEN_A
CHAIN_B_TOKEN_TKB=$CHAIN_B_TOKEN_B
EOF

echo "✅ Environment file created at $PROJECT_ROOT/.env"
echo ""
echo "📋 Contract addresses loaded:"
echo "   Chain A Factory: $CHAIN_A_FACTORY"
echo "   Chain A Protocol: $CHAIN_A_PROTOCOL"
echo "   Chain B Factory: $CHAIN_B_FACTORY"
echo "   Chain B Protocol: $CHAIN_B_PROTOCOL"
echo ""
echo "🚀 You can now run the resolver with: deno task resolver:start"