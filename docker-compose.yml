services:
  # Main resolver service (acts as coordinator and Bob/taker)
  resolver:
    build:
      context: .
      dockerfile: Dockerfile.resolver
      # Always use cache by default
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: bmn-resolver
    hostname: resolver
    environment:
      - DENO_ENV=production
      - DENO_KV_PATH=/app/data/kv/resolver.db
      - DENO_DIR=/app/data/cache
      - SERVICE_NAME=resolver
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - INDEXER_URL=http://host.docker.internal:42069
    env_file:
      - .env
    volumes:
      # Shared data directory for persistent storage
      - bmn-data:/app/data
    ports:
      - "8000:8000"  # Resolver API
    restart: unless-stopped
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    labels:
      - "com.bmn.service=resolver"
      - "com.bmn.role=coordinator"

  # Alice service (swap initiator)
  alice:
    build:
      context: .
      dockerfile: Dockerfile.alice
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: bmn-alice
    hostname: alice
    environment:
      - DENO_ENV=production
      - DENO_KV_PATH=/app/data/kv/alice.db
      - DENO_DIR=/app/data/cache
      - SERVICE_NAME=alice
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RESOLVER_URL=http://resolver:8000
    env_file:
      - .env
    volumes:
      # Shared data directory
      - bmn-data:/app/data
    ports:
      - "8001:8001"  # Alice API
    restart: unless-stopped
    depends_on:
      - resolver
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    labels:
      - "com.bmn.service=alice"
      - "com.bmn.role=initiator"

  # Bob service (swap acceptor/taker - separate instance of resolver)
  bob:
    build:
      context: .
      dockerfile: Dockerfile.bob
      args:
        - BUILDKIT_INLINE_CACHE=1
    container_name: bmn-bob
    hostname: bob
    environment:
      - DENO_ENV=production
      - DENO_KV_PATH=/app/data/kv/bob.db
      - DENO_DIR=/app/data/cache
      - SERVICE_NAME=bob
      - SERVICE_MODE=bob
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - RESOLVER_URL=http://resolver:8000
    env_file:
      - .env
    volumes:
      # Shared data directory
      - bmn-data:/app/data
    ports:
      - "8002:8002"  # Bob API
    restart: unless-stopped
    depends_on:
      - resolver
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "10"
    labels:
      - "com.bmn.service=bob"
      - "com.bmn.role=acceptor"

  # Optional: Redis for distributed caching and pub/sub
  redis:
    image: redis:7-alpine
    container_name: bmn-redis
    hostname: redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    labels:
      - "com.bmn.service=redis"
      - "com.bmn.role=cache"

  # Optional: Prometheus for metrics collection
  prometheus:
    build:
      context: .
      dockerfile: Dockerfile.prometheus
    container_name: bmn-prometheus
    hostname: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    volumes:
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    restart: unless-stopped
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    labels:
      - "com.bmn.service=prometheus"
      - "com.bmn.role=monitoring"

  # Optional: Grafana for visualization
  grafana:
    build:
      context: .
      dockerfile: Dockerfile.grafana
    container_name: bmn-grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - bmn-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    labels:
      - "com.bmn.service=grafana"
      - "com.bmn.role=visualization"

networks:
  bmn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  # Named volumes for better management
  bmn-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local